name: Build and Release Python Binary

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable (Unix)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          pyinstaller --onefile remoteagent.py

      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\activate
          pyinstaller --onefile remoteagent.py

      - name: Rename binary for OS
        run: |
          mkdir output
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv dist/remoteagent.exe output/remoteagent-windows.exe
          elif [ "${{ runner.os }}" = "macOS" ]; then
            mv dist/remoteagent output/remoteagent-macos
          else
            mv dist/remoteagent output/remoteagent-linux
          fi
        shell: bash

      - name: Package artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          cd output
          zip -r ../release-${{ runner.os }}.zip .
        shell: bash

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path output\* -DestinationPath release-Windows.zip
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}
          path: release-${{ runner.os }}.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up GitHub CLI
        uses: actions/setup-gh@v2

      - name: Fetch tags and generate new version
        id: tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "v0.0.0")
          major=$(echo $latest | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest | cut -d. -f2)
          patch=$(echo $latest | cut -d. -f3)
          new_minor=$((minor + 1))
          new_tag="v${major}.${new_minor}.0"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@users.noreply.github.com
          git tag ${{ steps.tag.outputs.new_tag }}
          git push origin ${{ steps.tag.outputs.new_tag }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
